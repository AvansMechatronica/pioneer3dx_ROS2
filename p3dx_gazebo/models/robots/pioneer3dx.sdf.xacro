<?xml version="1.0"?>
<sdf version="1.8" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:macro name="pioneer3dx" params="base_link">
    <model name="pioneer3dx">

      <!-- Define robot constants -->
      <xacro:property name="base_width" value="0.34"/>
      <xacro:property name="wheel_radius" value="0.12"/>
      <xacro:property name="wheel_width" value="0.04"/>
      <xacro:property name="caster_wheel_radius" value="0.0375"/>
      <xacro:property name="caster_wheel_width" value="0.01"/>


      <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
          <pose>0 0 0 ${pi/2} 0 0</pose>
          <mass>${m}</mass>
          <inertia>
            <ixx>${(m/12) * (3*r*r + h*h)}</ixx>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyy>${(m/12) * (3*r*r + h*h)}</iyy>
            <iyz>0.0</iyz>
            <izz>${(m/2) * (r*r)}</izz>
          </inertia>
        </inertial>
      </xacro:macro>

      <link name="${base_link}"/>
      <link name="chassis">
        <pose>-0.045 0 0.148 0 0 0</pose>
        <inertial>
          <mass>3.5</mass>
          <inertia>
            <ixx>1</ixx>
            <iyy>1</iyy>
            <izz>1</izz>
            <ixy>0</ixy>
            <ixz>0</ixz>
            <iyz>0</iyz>
          </inertia>
        </inertial>
        <visual name="chassis_visual">
          <geometry>
            <mesh>
              <uri>package://p3dx_robots_description/meshes/p3dx_meshes/chassis.stl</uri>
            </mesh>
          </geometry>
          <material>
            <ambient>0.851 0 0 1</ambient>
            <diffuse>0.851 0 0 1</diffuse>
          </material>
        </visual>
        <collision name="chassis_collision">
          <geometry>
            <box>
        <!--
              <size>0.45 0.35 0.35</size>
        -->
              <size>0.445 0.277 0.17</size>
            </box>
          </geometry>
        </collision>
      </link>

      <joint name="chassis_joint" type="fixed">
        <parent>${base_link}</parent>
        <child>chassis</child>
        <pose>0 0 0 0 0 0</pose>
      </joint>

      <!-- Top Plate -->
      <link name="top_plate">
        <pose>-0.045 0 0.234 0 0 0</pose>
        <inertial>
          <mass>0.01</mass>
          <inertia>
            <ixx>1</ixx><iyy>1</iyy><izz>1</izz>
            <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
          </inertia>
        </inertial>
        <visual name="top_plate_visual">
          <geometry>
            <mesh>
              <uri>package://p3dx_robots_description/meshes/p3dx_meshes/top.stl</uri>
            </mesh>
          </geometry>
          <material>
            <ambient>0.038 0.038 0.038 1</ambient>
            <diffuse>0.038 0.038 0.038 1</diffuse>
          </material>
        </visual>
      </link>

      <joint name="base_top_joint" type="fixed">
        <parent>chassis</parent>
        <child>top_plate</child>
        <pose>0 0 0 0 0 0</pose>
      </joint>

      <!-- Front Sonar -->
      <link name="front_sonar">
        <pose>-0.198 0 0.208 0 0 0</pose>
        <inertial>
          <mass>0.0001</mass>
          <inertia>
            <ixx>1</ixx><iyy>1</iyy><izz>1</izz>
            <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
          </inertia>
        </inertial>
        <visual name="front_sonar_visual">
          <geometry>
            <mesh>
              <uri>package://p3dx_robots_description/meshes/p3dx_meshes/front_sonar.stl</uri>
            </mesh>
          </geometry>
        </visual>
      </link>
      <joint name="base_front_joint" type="fixed">
        <parent>chassis</parent>
        <child>front_sonar</child>
        <pose>0 0 0 0 0 0</pose>
      </joint>

      <!-- Back Sonar -->
      <link name="back_sonar">
        <pose>0.109 0 0.209 0 0 0</pose>
        <inertial>
          <mass>0.0001</mass>
          <inertia>
            <ixx>1</ixx><iyy>1</iyy><izz>1</izz>
            <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
          </inertia>
        </inertial>
        <visual name="back_sonar_visual">
          <geometry>
            <mesh>
              <uri>package://p3dx_robots_description/meshes/p3dx_meshes/back_sonar.stl</uri>
            </mesh>
          </geometry>
        </visual>
      </link>
      <joint name="base_back_joint" type="fixed">
        <parent>chassis</parent>
        <child>back_sonar</child>
        <pose>0 0 0 0 0 0</pose>
      </joint>

      <!-- Caster Swivel -->
      <link name="caster_swivel">
        <pose>-0.185 0 0.055 0 0 0</pose>
        <inertial>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.01</ixx><iyy>0.01</iyy><izz>0.01</izz>
            <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
          </inertia>
        </inertial>
        <visual name="caster_swivel_visual">
          <geometry>
            <mesh>
              <uri>package://p3dx_robots_description/meshes/p3dx_meshes/caster_swivel.stl</uri>
            </mesh>
          </geometry>
        </visual>
      </link>
      <joint name="base_caster_swivel_joint" type="revolute">
        <parent>${base_link}</parent>
        <child>caster_swivel</child>
        <axis><xyz>0 0 1</xyz></axis>
      </joint>

      <!-- Caster Wheel -->
      <link name="caster_wheel">
        <pose>-0.211 0 0.039 0 ${pi/2} ${pi/2}</pose>
        <inertial>
          <mass>0.1</mass>
          <inertia>
            <ixx>0.0124</ixx><iyy>0.0152</iyy><izz>0.0117</izz>
            <ixy>0</ixy><ixz>0</ixz><iyz>0</iyz>
          </inertia>
        </inertial>
        <visual name="caster_wheel_visual">
          <geometry>
            <cylinder>
              <radius>${caster_wheel_radius}</radius>
              <length>${caster_wheel_width}</length>
            </cylinder>
          </geometry>
        </visual>
        <collision name="collision">
          <geometry>
            <cylinder>
              <radius>${caster_wheel_radius}</radius>
              <length>${caster_wheel_width}</length>
            </cylinder>
          </geometry>
          <surface>
            <friction>
              <ode>
                <mu>100000.0</mu>
                <mu2>100000.0</mu2>
                <slip1>0.0</slip1>
                <slip2>0.0</slip2>
              </ode>
            </friction>
          </surface>
        </collision>

        <!-- Wheel inertia -->
        <xacro:cylinder_inertia m="0.2" r="${caster_wheel_radius}" h="${caster_wheel_width}"/>

      </link>
      <joint name="caster_swivel_hubcap_joint" type="revolute">
        <parent>caster_swivel</parent>
        <child>caster_wheel</child>
        <axis>
          <xyz>0 0 1</xyz>
          <limit>
            <lower>-1e16</lower>
            <upper>1e16</upper>
            <effort>10</effort>
            <velocity>10</velocity>
          </limit>
        </axis>
      </joint>

      <!-- Wheels & Hub -->
      <xacro:macro name="wheel" params="prefix y_offset">
        <!-- Wheel Hub -->
        <link name="${prefix}_hub">
          <pose>0 ${y_offset} ${wheel_radius} 0 0 0</pose>
          <visual name="${prefix}_hub_visual">
            <geometry>
              <mesh>
                <uri>package://p3dx_robots_description/meshes/p3dx_meshes/${prefix}_hubcap.stl</uri>
              </mesh>
            </geometry>
          </visual>
          <xacro:cylinder_inertia m="0.1" r="${wheel_radius-0.05}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_hub_joint" type="fixed">
          <parent>chassis</parent>
          <child>${prefix}_hub</child>
          <pose>0 ${y_offset} ${wheel_radius} 0 0 0</pose> <!-- ???  -->
        </joint>

        <!-- Wheel -->
        <link name="${prefix}_wheel">
          <pose>0 ${y_offset} ${wheel_radius} 0 ${pi/2} ${pi/2}</pose> <!-- dit snap ik niet  -->
          <visual name="${prefix}_wheel_visual">
            <geometry>
                <!--
              <mesh>
                <uri>package://p3dx_robots_description/meshes/p3dx_meshes/${prefix}_wheel.stl</uri>
              </mesh>
                -->
              <cylinder>
                <radius>${wheel_radius}</radius>
                <length>${wheel_width}</length>
              </cylinder>
            </geometry>
            <material>
              <ambient>0.038 0.038 0.038 1</ambient>
              <diffuse>0.038 0.038 0.038 1</diffuse>
            </material>
          </visual>

          <collision name="collision">
            <geometry>
              <cylinder>
                <radius>${wheel_radius}</radius>
                <length>${wheel_width}</length>
              </cylinder>
            </geometry>
            <surface>
              <friction>
                <ode>
                  <mu>100000.0</mu>
                  <mu2>100000.0</mu2>
                  <slip1>0.0</slip1>
                  <slip2>0.0</slip2>
                </ode>
              </friction>
            </surface>
          </collision>

          <!-- Wheel inertia -->
          <xacro:cylinder_inertia m="1.5" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <!-- Revolute joint for wheel rotation -->
        <joint name="${prefix}_wheel_joint" type="revolute">
          <parent>${prefix}_hub</parent>
          <child>${prefix}_wheel</child>
          <!-- Move wheel along x so it lines up properly with hub -->
          <pose>0 0 0 0 0 0</pose>
          <!-- Rotation axis along Y -->
          <axis>
            <xyz>0 0 1</xyz>
            <limit>
              <lower>-1e16</lower>
              <upper>1e16</upper>
              <effort>10</effort>
              <velocity>10</velocity>
            </limit>
          </axis>
        </joint>
      </xacro:macro>

      <xacro:wheel prefix="left" y_offset="${base_width/2}" />
      <xacro:wheel prefix="right" y_offset="${-base_width/2}" />


      <!-- DiffDrive Plugin -->
      <plugin 
        filename="gz-sim-diff-drive-system"
        name="gz::sim::systems::DiffDrive">
        <left_joint>left_wheel_joint</left_joint>
        <right_joint>right_wheel_joint</right_joint>
        <wheel_separation>${base_width}</wheel_separation>
        <wheel_radius>${wheel_radius}</wheel_radius>
        <!--
        <base_frame>${base_link}</base_frame>
        <publish_rate>50</publish_rate>
        <publish_joint_states>true</publish_joint_states>
        -->
      </plugin>


      <!-- JointState Publisher -->
      <plugin
        name="gz::sim::systems::JointStatePublisher"
        filename="libgz-sim-joint-state-publisher-system.so">
      </plugin>

      <plugin
        filename="gz-sim-sensors-system"
        name="gz::sim::systems::Sensors">
        <render_engine>ogre2</render_engine>
      </plugin>

      <frame name="lidar_frame" attached_to='base_link'>
          <pose>0.0 0 0.25 0 0 0</pose>
      </frame>

      <link name="lidar">

        <sensor name='gpu_lidar' type='gpu_lidar'>"
          <pose relative_to='base_frame'>0 0 0 0 0 0</pose>
          <topic>lidar</topic>
          <update_rate>10</update_rate>
          <ray>
              <scan>
                  <horizontal>
                      <samples>640</samples>
                      <resolution>1</resolution>
                      <min_angle>-1.396263</min_angle>
                      <max_angle>1.396263</max_angle>
                  </horizontal>
                  <vertical>
                      <samples>1</samples>
                      <resolution>0.01</resolution>
                      <min_angle>0</min_angle>
                      <max_angle>0</max_angle>
                  </vertical>
              </scan>
              <range>
                  <min>0.08</min>
                  <max>10.0</max>
                  <resolution>0.01</resolution>
              </range>
          </ray>
          <always_on>1</always_on>
          <visualize>true</visualize>
        </sensor>
      </link>
    </model>
  </xacro:macro>
</sdf>
