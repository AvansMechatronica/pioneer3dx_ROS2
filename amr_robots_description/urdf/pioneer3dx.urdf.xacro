<?xml version="1.0"?>
<robot name="pioneer3dx" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Define robot constants -->
  <xacro:property name="base_width" value="0.34"/>
  <xacro:property name="wheel_radius" value="0.12"/>
  <xacro:property name="wheel_width" value="0.04"/>
  <xacro:property name="caster_wheel_radius" value="0.0375"/>
  <xacro:property name="caster_wheel_width" value="0.01"/>

  <!-- Macro: cylinder inertia -->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      <mass value="${m}"/>
      <inertia
        ixx="${(m/12)*(3*r*r + h*h)}"
        iyy="${(m/12)*(3*r*r + h*h)}"
        izz="${(m/2)*(r*r)}"
        ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </xacro:macro>


  <!-- Base link -->
  <link name="base_link"/>

  <!-- Chassis -->
  <link name="chassis">
    <inertial>
      <mass value="3.5"/>
      <inertia ixx="1" iyy="1" izz="1" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://amr_robots_description/meshes/p3dx_meshes/chassis.stl"/>
      </geometry>
      <material name="red">
        <color rgba="0.851 0 0 1"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.445 0.277 0.17"/>
      </geometry>
    </collision>
  </link>

  <joint name="chassis_joint" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
    <origin xyz="-0.045 0 0.148" rpy="0 0 0"/>
  </joint>

  <!-- Top Plate -->
  <link name="top_plate">
    <inertial>
      <mass value="0.01"/>
      <inertia ixx="1" iyy="1" izz="1" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://amr_robots_description/meshes/p3dx_meshes/top.stl"/>
      </geometry>
      <material name="gray">
        <color rgba="0.038 0.038 0.038 1"/>
      </material>
    </visual>
  </link>

  <joint name="base_top_joint" type="fixed">
    <parent link="base_link"/>
    <child link="top_plate"/>
   <origin xyz="-0.045 0 0.234" rpy="0 0 0"/>
  </joint>


  <!-- Front Sonar -->
  <link name="front_sonar">
    <inertial>
      
      <mass value="0.0001"/>
      <inertia ixx="1" iyy="1" izz="1" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://amr_robots_description/meshes/p3dx_meshes/front_sonar.stl"/>
      </geometry>
    </visual>
  </link>

  <joint name="base_front_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_sonar"/>
    <origin xyz="-0.198 0 0.208" rpy="0 0 0"/>
  </joint>

  <!-- Back Sonar -->
  <link name="back_sonar">
    <inertial>
      
      <mass value="0.0001"/>
      <inertia ixx="1" iyy="1" izz="1" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://amr_robots_description/meshes/p3dx_meshes/back_sonar.stl"/>
      </geometry>
    </visual>
  </link>

  <joint name="base_back_joint" type="fixed">
    <parent link="base_link"/>
    <child link="back_sonar"/>
    <origin xyz="0.109 0 0.209" rpy="0 0 0"/>
  </joint>


  <link name="caster_swivel">
    <inertial>
      
      <mass value="0.0001"/>
      <inertia ixx="1" iyy="1" izz="1" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="package://amr_robots_description/meshes/p3dx_meshes/caster_swivel.stl"/>
      </geometry>
    </visual>
  </link>

  <joint name="base_caster_swivel_joint" type="fixed">
    <parent link="base_link"/>
    <child link="caster_swivel"/>
    <origin xyz="-0.185 0 0.055" rpy="0 0 0"/>
  </joint>

  <!-- Caster wheel -->
  <link name="caster_wheel">
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.0124" iyy="0.0152" izz="0.0117" ixy="0" ixz="0" iyz="0"/>
    </inertial>
    <visual>
      <geometry>
        <cylinder radius="${caster_wheel_radius}" length="${caster_wheel_width}"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="${caster_wheel_radius}" length="${caster_wheel_width}"/>
      </geometry>
    </collision>
  </link>

  <joint name="caster_swivel_hubcap_joint" type="revolute">
    <parent link="caster_swivel"/>
    <child link="caster_wheel"/>
    <!--<origin xyz="-0.211 0 0.039" rpy="${pi/2} ${pi/2} 0"/>-->
    <origin xyz="0 0 0" rpy="${pi/2} ${pi/2} 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="10" velocity="10"/>
  </joint>


  <!-- Wheel macro -->
  <xacro:macro name="wheel" params="prefix y_offset">
    <link name="${prefix}_hub">
      <inertial>
        <mass value="0.1"/>
        <inertia ixx="0.01" iyy="0.01" izz="0.01" ixy="0" ixz="0" iyz="0"/>
      </inertial>
      <visual>
        <geometry>
          <mesh filename="package://amr_robots_description/meshes/p3dx_meshes/${prefix}_hubcap.stl"/>
        </geometry>
      </visual>
      <xacro:cylinder_inertia m="0.1" r="${wheel_radius-0.05}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_hub_joint" type="fixed">
      <parent link="base_link"/>
      <child link="${prefix}_hub"/>
      <origin xyz="0 ${y_offset} ${wheel_radius}" rpy="0 0 0"/>
    </joint>

    <link name="${prefix}_wheel">
      <inertial>
        <mass value="1.5"/>
        <inertia ixx="0.01" iyy="0.01" izz="0.01" ixy="0" ixz="0" iyz="0"/>
      </inertial>
      <visual>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
        <material name="black">
          <color rgba="0.038 0.038 0.038 1"/>
        </material>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="1.5" r="${wheel_radius}" h="${wheel_width}"/>
    </link>

    <joint name="${prefix}_wheel_joint" type="revolute">
      <parent link="${prefix}_hub"/>
      <child link="${prefix}_wheel"/>
      <!--<origin xyz="0 ${y_offset} ${wheel_radius}" rpy="${pi/2} ${pi/2} 0"/>-->
      <origin xyz="0 0 0" rpy="${pi/2} ${pi/2} 0"/>
      <axis xyz="0 0 1"/>
      <limit effort="10" velocity="10"/>
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="left" y_offset="${base_width/2}"/>
  <xacro:wheel prefix="right" y_offset="${-base_width/2}"/>

  <gazebo>
    <!-- DiffDrive Plugin -->
    <plugin 
      filename="gz-sim-diff-drive-system"
      name="gz::sim::systems::DiffDrive">
      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>
      <wheel_separation>${base_width}</wheel_separation>
      <wheel_radius>${wheel_radius}</wheel_radius>
      <!--
      <base_frame>${base_link}</base_frame>
      <publish_rate>50</publish_rate>
      <publish_joint_states>true</publish_joint_states>
      -->
    </plugin>


    <!-- JointState Publisher -->
    <plugin
      name="gz::sim::systems::JointStatePublisher"
      filename="libgz-sim-joint-state-publisher-system.so">
    </plugin>
  </gazebo>
</robot>
